#![allow(non_camel_case_types)]
// mostly automatically generated by rust-bindgen
extern crate libc;

use self::libc::{c_char, c_ushort, c_uchar, c_void, dev_t, gid_t, ino_t, mode_t, off_t, size_t,
                 stat, ssize_t, timespec, uid_t};

pub enum Struct_glfs { }
pub type glfs_t = Struct_glfs;
pub enum Struct_glfs_fd { }
pub type glfs_fd_t = Struct_glfs_fd;
pub type glfs_io_cbk = ::std::option::Option<extern "C" fn(fd: *mut glfs_fd_t,
                                                             ret: ssize_t,
                                                             data: *mut self::libc::c_void)
                                                             -> ()>;

#[repr(C)]
pub struct iovec {
    pub iov_base: *const c_void,
    pub iov_len: size_t,
}

#[repr(C)]
pub struct dirent {
    pub d_ino: ino_t, // inode number
    pub d_off: off_t, // not an offset; see NOTES
    pub d_reclen: c_ushort, // length of this record
    pub d_type: c_uchar, /* type of file; not supported
                          * by all filesystem types */
    pub d_name: [c_char; 256], // filename
}

#[link(name = "gfapi")]
extern "C" {
    pub fn glfs_new(volname: *const self::libc::c_char) -> *mut glfs_t;
    pub fn glfs_set_volfile(fs: *mut glfs_t,
                            volfile: *const self::libc::c_char)
                            -> self::libc::c_int;
    pub fn glfs_set_volfile_server(fs: *mut glfs_t,
                                   transport: *const self::libc::c_char,
                                   host: *const self::libc::c_char,
                                   port: self::libc::c_int)
                                   -> self::libc::c_int;
    pub fn glfs_unset_volfile_server(fs: *mut glfs_t,
                                     transport: *const self::libc::c_char,
                                     host: *const self::libc::c_char,
                                     port: self::libc::c_int)
                                     -> self::libc::c_int;
    pub fn glfs_set_logging(fs: *mut glfs_t,
                            logfile: *const self::libc::c_char,
                            loglevel: self::libc::c_int)
                            -> self::libc::c_int;
    pub fn glfs_init(fs: *mut glfs_t) -> self::libc::c_int;
    pub fn glfs_fini(fs: *mut glfs_t) -> self::libc::c_int;
    pub fn glfs_get_volfile(fs: *mut glfs_t, buf: *mut self::libc::c_void, len: size_t) -> ssize_t;
    pub fn glfs_get_volumeid(fs: *mut Struct_glfs,
                             volid: *mut self::libc::c_char,
                             size: size_t)
                             -> self::libc::c_int;
    pub fn glfs_setfsuid(fsuid: uid_t) -> self::libc::c_int;
    pub fn glfs_setfsgid(fsgid: gid_t) -> self::libc::c_int;
    pub fn glfs_setfsgroups(size: size_t, list: *const gid_t) -> self::libc::c_int;
    pub fn glfs_open(fs: *mut glfs_t,
                     path: *const self::libc::c_char,
                     flags: self::libc::c_int)
                     -> *mut glfs_fd_t;
    pub fn glfs_creat(fs: *mut glfs_t,
                      path: *const self::libc::c_char,
                      flags: self::libc::c_int,
                      mode: mode_t)
                      -> *mut glfs_fd_t;
    pub fn glfs_close(fd: *mut glfs_fd_t) -> self::libc::c_int;
    pub fn glfs_from_glfd(fd: *mut glfs_fd_t) -> *mut glfs_t;
    pub fn glfs_set_xlator_option(fs: *mut glfs_t,
                                  xlator: *const self::libc::c_char,
                                  key: *const self::libc::c_char,
                                  value: *const self::libc::c_char)
                                  -> self::libc::c_int;
    pub fn glfs_read(fd: *mut glfs_fd_t,
                     buf: *mut self::libc::c_void,
                     count: size_t,
                     flags: self::libc::c_int)
                     -> ssize_t;
    pub fn glfs_write(fd: *mut glfs_fd_t,
                      buf: *const self::libc::c_void,
                      count: size_t,
                      flags: self::libc::c_int)
                      -> ssize_t;
    pub fn glfs_read_async(fd: *mut glfs_fd_t,
                           buf: *mut self::libc::c_void,
                           count: size_t,
                           flags: self::libc::c_int,
                           _fn: glfs_io_cbk,
                           data: *mut self::libc::c_void)
                           -> self::libc::c_int;
    pub fn glfs_write_async(fd: *mut glfs_fd_t,
                            buf: *const self::libc::c_void,
                            count: size_t,
                            flags: self::libc::c_int,
                            _fn: glfs_io_cbk,
                            data: *mut self::libc::c_void)
                            -> self::libc::c_int;
    pub fn glfs_readv(fd: *mut glfs_fd_t,
                      iov: *const iovec,
                      iovcnt: self::libc::c_int,
                      flags: self::libc::c_int)
                      -> ssize_t;
    pub fn glfs_writev(fd: *mut glfs_fd_t,
                       iov: *const iovec,
                       iovcnt: self::libc::c_int,
                       flags: self::libc::c_int)
                       -> ssize_t;
    pub fn glfs_readv_async(fd: *mut glfs_fd_t,
                            iov: *const iovec,
                            count: self::libc::c_int,
                            flags: self::libc::c_int,
                            _fn: glfs_io_cbk,
                            data: *mut self::libc::c_void)
                            -> self::libc::c_int;
    pub fn glfs_writev_async(fd: *mut glfs_fd_t,
                             iov: *const iovec,
                             count: self::libc::c_int,
                             flags: self::libc::c_int,
                             _fn: glfs_io_cbk,
                             data: *mut self::libc::c_void)
                             -> self::libc::c_int;
    pub fn glfs_pread(fd: *mut glfs_fd_t,
                      buf: *mut self::libc::c_void,
                      count: size_t,
                      offset: off_t,
                      flags: self::libc::c_int)
                      -> ssize_t;
    pub fn glfs_pwrite(fd: *mut glfs_fd_t,
                       buf: *const self::libc::c_void,
                       count: size_t,
                       offset: off_t,
                       flags: self::libc::c_int)
                       -> ssize_t;
    pub fn glfs_pread_async(fd: *mut glfs_fd_t,
                            buf: *mut self::libc::c_void,
                            count: size_t,
                            offset: off_t,
                            flags: self::libc::c_int,
                            _fn: glfs_io_cbk,
                            data: *mut self::libc::c_void)
                            -> self::libc::c_int;
    pub fn glfs_pwrite_async(fd: *mut glfs_fd_t,
                             buf: *const self::libc::c_void,
                             count: self::libc::c_int,
                             offset: off_t,
                             flags: self::libc::c_int,
                             _fn: glfs_io_cbk,
                             data: *mut self::libc::c_void)
                             -> self::libc::c_int;
    pub fn glfs_preadv(fd: *mut glfs_fd_t,
                       iov: *const iovec,
                       iovcnt: self::libc::c_int,
                       offset: off_t,
                       flags: self::libc::c_int)
                       -> ssize_t;
    pub fn glfs_pwritev(fd: *mut glfs_fd_t,
                        iov: *const iovec,
                        iovcnt: self::libc::c_int,
                        offset: off_t,
                        flags: self::libc::c_int)
                        -> ssize_t;
    pub fn glfs_preadv_async(fd: *mut glfs_fd_t,
                             iov: *const iovec,
                             count: self::libc::c_int,
                             offset: off_t,
                             flags: self::libc::c_int,
                             _fn: glfs_io_cbk,
                             data: *mut self::libc::c_void)
                             -> self::libc::c_int;
    pub fn glfs_pwritev_async(fd: *mut glfs_fd_t,
                              iov: *const iovec,
                              count: self::libc::c_int,
                              offset: off_t,
                              flags: self::libc::c_int,
                              _fn: glfs_io_cbk,
                              data: *mut self::libc::c_void)
                              -> self::libc::c_int;
    pub fn glfs_lseek(fd: *mut glfs_fd_t, offset: off_t, whence: self::libc::c_int) -> off_t;
    pub fn glfs_truncate(fs: *mut glfs_t,
                         path: *const self::libc::c_char,
                         length: off_t)
                         -> self::libc::c_int;
    pub fn glfs_ftruncate(fd: *mut glfs_fd_t, length: off_t) -> self::libc::c_int;
    pub fn glfs_ftruncate_async(fd: *mut glfs_fd_t,
                                length: off_t,
                                _fn: glfs_io_cbk,
                                data: *mut self::libc::c_void)
                                -> self::libc::c_int;
    pub fn glfs_lstat(fs: *mut glfs_t,
                      path: *const self::libc::c_char,
                      buf: *mut stat)
                      -> self::libc::c_int;
    pub fn glfs_stat(fs: *mut glfs_t,
                     path: *const self::libc::c_char,
                     buf: *mut stat)
                     -> self::libc::c_int;
    pub fn glfs_fstat(fd: *mut glfs_fd_t, buf: *mut stat) -> self::libc::c_int;
    pub fn glfs_fsync(fd: *mut glfs_fd_t) -> self::libc::c_int;
    pub fn glfs_fsync_async(fd: *mut glfs_fd_t,
                            _fn: glfs_io_cbk,
                            data: *mut self::libc::c_void)
                            -> self::libc::c_int;
    pub fn glfs_fdatasync(fd: *mut glfs_fd_t) -> self::libc::c_int;
    pub fn glfs_fdatasync_async(fd: *mut glfs_fd_t,
                                _fn: glfs_io_cbk,
                                data: *mut self::libc::c_void)
                                -> self::libc::c_int;
    pub fn glfs_access(fs: *mut glfs_t,
                       path: *const self::libc::c_char,
                       mode: self::libc::c_int)
                       -> self::libc::c_int;
    pub fn glfs_symlink(fs: *mut glfs_t,
                        oldpath: *const self::libc::c_char,
                        newpath: *const self::libc::c_char)
                        -> self::libc::c_int;
    pub fn glfs_readlink(fs: *mut glfs_t,
                         path: *const self::libc::c_char,
                         buf: *mut self::libc::c_char,
                         bufsiz: size_t)
                         -> self::libc::c_int;
    pub fn glfs_mknod(fs: *mut glfs_t,
                      path: *const self::libc::c_char,
                      mode: mode_t,
                      dev: dev_t)
                      -> self::libc::c_int;
    pub fn glfs_mkdir(fs: *mut glfs_t,
                      path: *const self::libc::c_char,
                      mode: mode_t)
                      -> self::libc::c_int;
    pub fn glfs_unlink(fs: *mut glfs_t, path: *const self::libc::c_char) -> self::libc::c_int;
    pub fn glfs_rmdir(fs: *mut glfs_t, path: *const self::libc::c_char) -> self::libc::c_int;
    pub fn glfs_rename(fs: *mut glfs_t,
                       oldpath: *const self::libc::c_char,
                       newpath: *const self::libc::c_char)
                       -> self::libc::c_int;
    pub fn glfs_link(fs: *mut glfs_t,
                     oldpath: *const self::libc::c_char,
                     newpath: *const self::libc::c_char)
                     -> self::libc::c_int;
    pub fn glfs_opendir(fs: *mut glfs_t, path: *const self::libc::c_char) -> *mut glfs_fd_t;
    pub fn glfs_readdir_r(fd: *mut glfs_fd_t,
                          dirent: *mut dirent,
                          result: *mut *mut dirent)
                          -> self::libc::c_int;
    pub fn glfs_readdirplus_r(fd: *mut glfs_fd_t,
                              stat: *mut stat,
                              dirent: *mut dirent,
                              result: *mut *mut dirent)
                              -> self::libc::c_int;
    pub fn glfs_readdir(fd: *mut glfs_fd_t) -> *mut dirent;
    pub fn glfs_readdirplus(fd: *mut glfs_fd_t, stat: *mut stat) -> *mut dirent;
    pub fn glfs_telldir(fd: *mut glfs_fd_t) -> self::libc::c_long;
    pub fn glfs_seekdir(fd: *mut glfs_fd_t, offset: self::libc::c_long) -> ();
    pub fn glfs_closedir(fd: *mut glfs_fd_t) -> self::libc::c_int;
    // pub fn glfs_statvfs(fs: *mut glfs_t, path: *const self::libc::c_char,
    //                    buf: *mut Struct_statvfs) -> self::libc::c_int;
    pub fn glfs_chmod(fs: *mut glfs_t,
                      path: *const self::libc::c_char,
                      mode: mode_t)
                      -> self::libc::c_int;
    pub fn glfs_fchmod(fd: *mut glfs_fd_t, mode: mode_t) -> self::libc::c_int;
    pub fn glfs_chown(fs: *mut glfs_t,
                      path: *const self::libc::c_char,
                      uid: uid_t,
                      gid: gid_t)
                      -> self::libc::c_int;
    pub fn glfs_lchown(fs: *mut glfs_t,
                       path: *const self::libc::c_char,
                       uid: uid_t,
                       gid: gid_t)
                       -> self::libc::c_int;
    pub fn glfs_fchown(fd: *mut glfs_fd_t, uid: uid_t, gid: gid_t) -> self::libc::c_int;
    pub fn glfs_utimens(fs: *mut glfs_t,
                        path: *const self::libc::c_char,
                        times: *mut timespec)
                        -> self::libc::c_int;
    pub fn glfs_lutimens(fs: *mut glfs_t,
                         path: *const self::libc::c_char,
                         times: *mut timespec)
                         -> self::libc::c_int;
    pub fn glfs_futimens(fd: *mut glfs_fd_t, times: *mut timespec) -> self::libc::c_int;
    pub fn glfs_getxattr(fs: *mut glfs_t,
                         path: *const self::libc::c_char,
                         name: *const self::libc::c_char,
                         value: *mut self::libc::c_void,
                         size: size_t)
                         -> ssize_t;
    pub fn glfs_lgetxattr(fs: *mut glfs_t,
                          path: *const self::libc::c_char,
                          name: *const self::libc::c_char,
                          value: *mut self::libc::c_void,
                          size: size_t)
                          -> ssize_t;
    pub fn glfs_fgetxattr(fd: *mut glfs_fd_t,
                          name: *const self::libc::c_char,
                          value: *mut self::libc::c_void,
                          size: size_t)
                          -> ssize_t;
    pub fn glfs_listxattr(fs: *mut glfs_t,
                          path: *const self::libc::c_char,
                          value: *mut self::libc::c_void,
                          size: size_t)
                          -> ssize_t;
    pub fn glfs_llistxattr(fs: *mut glfs_t,
                           path: *const self::libc::c_char,
                           value: *mut self::libc::c_void,
                           size: size_t)
                           -> ssize_t;
    pub fn glfs_flistxattr(fd: *mut glfs_fd_t,
                           value: *mut self::libc::c_void,
                           size: size_t)
                           -> ssize_t;
    pub fn glfs_setxattr(fs: *mut glfs_t,
                         path: *const self::libc::c_char,
                         name: *const self::libc::c_char,
                         value: *const self::libc::c_void,
                         size: size_t,
                         flags: self::libc::c_int)
                         -> self::libc::c_int;
    pub fn glfs_lsetxattr(fs: *mut glfs_t,
                          path: *const self::libc::c_char,
                          name: *const self::libc::c_char,
                          value: *const self::libc::c_void,
                          size: size_t,
                          flags: self::libc::c_int)
                          -> self::libc::c_int;
    pub fn glfs_fsetxattr(fd: *mut glfs_fd_t,
                          name: *const self::libc::c_char,
                          value: *const self::libc::c_void,
                          size: size_t,
                          flags: self::libc::c_int)
                          -> self::libc::c_int;
    pub fn glfs_removexattr(fs: *mut glfs_t,
                            path: *const self::libc::c_char,
                            name: *const self::libc::c_char)
                            -> self::libc::c_int;
    pub fn glfs_lremovexattr(fs: *mut glfs_t,
                             path: *const self::libc::c_char,
                             name: *const self::libc::c_char)
                             -> self::libc::c_int;
    pub fn glfs_fremovexattr(fd: *mut glfs_fd_t,
                             name: *const self::libc::c_char)
                             -> self::libc::c_int;
    pub fn glfs_fallocate(fd: *mut glfs_fd_t,
                          keep_size: self::libc::c_int,
                          offset: off_t,
                          len: size_t)
                          -> self::libc::c_int;
    pub fn glfs_discard(fd: *mut glfs_fd_t, offset: off_t, len: size_t) -> self::libc::c_int;
    pub fn glfs_discard_async(fd: *mut glfs_fd_t,
                              length: off_t,
                              lent: size_t,
                              _fn: glfs_io_cbk,
                              data: *mut self::libc::c_void)
                              -> self::libc::c_int;
    pub fn glfs_zerofill(fd: *mut glfs_fd_t, offset: off_t, len: off_t) -> self::libc::c_int;
    pub fn glfs_zerofill_async(fd: *mut glfs_fd_t,
                               length: off_t,
                               len: off_t,
                               _fn: glfs_io_cbk,
                               data: *mut self::libc::c_void)
                               -> self::libc::c_int;
    pub fn glfs_getcwd(fs: *mut glfs_t,
                       buf: *mut self::libc::c_char,
                       size: size_t)
                       -> *mut self::libc::c_char;
    pub fn glfs_chdir(fs: *mut glfs_t, path: *const self::libc::c_char) -> self::libc::c_int;
    pub fn glfs_fchdir(fd: *mut glfs_fd_t) -> self::libc::c_int;
    pub fn glfs_realpath(fs: *mut glfs_t,
                         path: *const self::libc::c_char,
                         resolved_path: *mut self::libc::c_char)
                         -> *mut self::libc::c_char;
    // pub fn glfs_posix_lock(fd: *mut glfs_fd_t, cmd: self::libc::c_int,
    //                       flock: *mut Struct_flock) -> self::libc::c_int;
    pub fn glfs_dup(fd: *mut glfs_fd_t) -> *mut glfs_fd_t;
}
